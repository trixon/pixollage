/* 
 * Copyright 2025 Patrik Karlström <patrik@trixon.se>.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package se.trixon.pixollage.ui;

import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import se.trixon.almond.util.swing.SwingHelper;
import se.trixon.pixollage.Options;
import se.trixon.pixollage.collage.Collage;

/**
 *
 * @author Patrik Karlström <patrik@trixon.se>
 */
public class CollagePanel extends javax.swing.JPanel {

    private BufferedImage mBufferedImage;
    private Collage mCollage;
    private final Options mOptions = Options.getInstance();

    /**
     * Creates new form CollagePanel
     */
    public CollagePanel() {
        initComponents();
    }

    @Override
    public void paint(Graphics g) {
        super.paint(g);
        if (mBufferedImage == null) {
            return;
        }

        var g2 = (Graphics2D) g;
        int x = (getWidth() - mBufferedImage.getWidth()) / 2;
        int y = (getHeight() - mBufferedImage.getHeight()) / 2;
        g2.drawImage(mBufferedImage, x, y, null);
    }

    void load(Collage collage) {
        mCollage = collage;
        var node = mOptions.getPreferences().node(mCollage.getProperties().getId().toString());
        node.addPreferenceChangeListener(pce -> {
            updatePreview();
        });
    }

    private void updatePreview() {
        var p = mCollage.getProperties();
        var margin = SwingHelper.getUIScaled(40);

        var w = getSize().width - margin;
        var h = getSize().height - margin;

        var ww = w;
        var hh = (int) (w / p.getAspectRatio());
        if (hh > h) {
            hh = h;
            ww = (int) (h * p.getAspectRatio());
        }

        mBufferedImage = mCollage.generateImage(ww, hh);

        repaint();
        revalidate();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(102, 102, 102));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        updatePreview();
    }//GEN-LAST:event_formComponentResized

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
